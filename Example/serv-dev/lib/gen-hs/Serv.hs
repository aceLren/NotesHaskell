{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Serv where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Serv_Types
import qualified Serv_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Ping_args = Ping_args deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable Ping_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Ping_args where 
  arbitrary = QC.elements [Ping_args]
from_Ping_args :: Ping_args -> T.ThriftVal
from_Ping_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Ping_args :: (T.Protocol p, T.Transport t) => p t -> Ping_args -> P.IO ()
write_Ping_args oprot record = T.writeVal oprot $ from_Ping_args record
encode_Ping_args :: (T.Protocol p, T.Transport t) => p t -> Ping_args -> LBS.ByteString
encode_Ping_args oprot record = T.serializeVal oprot $ from_Ping_args record
to_Ping_args :: T.ThriftVal -> Ping_args
to_Ping_args (T.TStruct fields) = Ping_args{

  }
to_Ping_args _ = P.error "not a struct"
read_Ping_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Ping_args
read_Ping_args iprot = to_Ping_args <$> T.readVal iprot (T.T_STRUCT typemap_Ping_args)
decode_Ping_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Ping_args
decode_Ping_args iprot bs = to_Ping_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_args) bs
typemap_Ping_args :: T.TypeMap
typemap_Ping_args = Map.fromList []
default_Ping_args :: Ping_args
default_Ping_args = Ping_args{
}
data Ping_result = Ping_result deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable Ping_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Ping_result where 
  arbitrary = QC.elements [Ping_result]
from_Ping_result :: Ping_result -> T.ThriftVal
from_Ping_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Ping_result :: (T.Protocol p, T.Transport t) => p t -> Ping_result -> P.IO ()
write_Ping_result oprot record = T.writeVal oprot $ from_Ping_result record
encode_Ping_result :: (T.Protocol p, T.Transport t) => p t -> Ping_result -> LBS.ByteString
encode_Ping_result oprot record = T.serializeVal oprot $ from_Ping_result record
to_Ping_result :: T.ThriftVal -> Ping_result
to_Ping_result (T.TStruct fields) = Ping_result{

  }
to_Ping_result _ = P.error "not a struct"
read_Ping_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Ping_result
read_Ping_result iprot = to_Ping_result <$> T.readVal iprot (T.T_STRUCT typemap_Ping_result)
decode_Ping_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Ping_result
decode_Ping_result iprot bs = to_Ping_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_result) bs
typemap_Ping_result :: T.TypeMap
typemap_Ping_result = Map.fromList []
default_Ping_result :: Ping_result
default_Ping_result = Ping_result{
}
data MyOp_args = MyOp_args  { myOp_args_a :: ServArgs
  , myOp_args_other :: LT.Text
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable MyOp_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` myOp_args_a record   `H.hashWithSalt` myOp_args_other record  
instance QC.Arbitrary MyOp_args where 
  arbitrary = M.liftM MyOp_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_MyOp_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_MyOp_args{myOp_args_a = myOp_args_a obj} then P.Nothing else P.Just $ default_MyOp_args{myOp_args_a = myOp_args_a obj}
    , if obj == default_MyOp_args{myOp_args_other = myOp_args_other obj} then P.Nothing else P.Just $ default_MyOp_args{myOp_args_other = myOp_args_other obj}
    ]
from_MyOp_args :: MyOp_args -> T.ThriftVal
from_MyOp_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v20 -> P.Just (1, ("a",from_ServArgs _v20))) $ myOp_args_a record
  , (\_v20 -> P.Just (2, ("other",T.TString $ E.encodeUtf8 _v20))) $ myOp_args_other record
  ]
write_MyOp_args :: (T.Protocol p, T.Transport t) => p t -> MyOp_args -> P.IO ()
write_MyOp_args oprot record = T.writeVal oprot $ from_MyOp_args record
encode_MyOp_args :: (T.Protocol p, T.Transport t) => p t -> MyOp_args -> LBS.ByteString
encode_MyOp_args oprot record = T.serializeVal oprot $ from_MyOp_args record
to_MyOp_args :: T.ThriftVal -> MyOp_args
to_MyOp_args (T.TStruct fields) = MyOp_args{
  myOp_args_a = P.maybe (myOp_args_a default_MyOp_args) (\(_,_val22) -> (case _val22 of {T.TStruct _val23 -> (to_ServArgs (T.TStruct _val23)); _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  myOp_args_other = P.maybe (myOp_args_other default_MyOp_args) (\(_,_val22) -> (case _val22 of {T.TString _val24 -> E.decodeUtf8 _val24; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_MyOp_args _ = P.error "not a struct"
read_MyOp_args :: (T.Transport t, T.Protocol p) => p t -> P.IO MyOp_args
read_MyOp_args iprot = to_MyOp_args <$> T.readVal iprot (T.T_STRUCT typemap_MyOp_args)
decode_MyOp_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> MyOp_args
decode_MyOp_args iprot bs = to_MyOp_args $ T.deserializeVal iprot (T.T_STRUCT typemap_MyOp_args) bs
typemap_MyOp_args :: T.TypeMap
typemap_MyOp_args = Map.fromList [(1,("a",(T.T_STRUCT typemap_ServArgs))),(2,("other",T.T_STRING))]
default_MyOp_args :: MyOp_args
default_MyOp_args = MyOp_args{
  myOp_args_a = default_ServArgs,
  myOp_args_other = ""}
data MyOp_result = MyOp_result  { myOp_result_success :: I.Int32
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable MyOp_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` myOp_result_success record  
instance QC.Arbitrary MyOp_result where 
  arbitrary = M.liftM MyOp_result (QC.arbitrary)
  shrink obj | obj == default_MyOp_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_MyOp_result{myOp_result_success = myOp_result_success obj} then P.Nothing else P.Just $ default_MyOp_result{myOp_result_success = myOp_result_success obj}
    ]
from_MyOp_result :: MyOp_result -> T.ThriftVal
from_MyOp_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v27 -> P.Just (0, ("success",T.TI32 _v27))) $ myOp_result_success record
  ]
write_MyOp_result :: (T.Protocol p, T.Transport t) => p t -> MyOp_result -> P.IO ()
write_MyOp_result oprot record = T.writeVal oprot $ from_MyOp_result record
encode_MyOp_result :: (T.Protocol p, T.Transport t) => p t -> MyOp_result -> LBS.ByteString
encode_MyOp_result oprot record = T.serializeVal oprot $ from_MyOp_result record
to_MyOp_result :: T.ThriftVal -> MyOp_result
to_MyOp_result (T.TStruct fields) = MyOp_result{
  myOp_result_success = P.maybe (myOp_result_success default_MyOp_result) (\(_,_val29) -> (case _val29 of {T.TI32 _val30 -> _val30; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_MyOp_result _ = P.error "not a struct"
read_MyOp_result :: (T.Transport t, T.Protocol p) => p t -> P.IO MyOp_result
read_MyOp_result iprot = to_MyOp_result <$> T.readVal iprot (T.T_STRUCT typemap_MyOp_result)
decode_MyOp_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> MyOp_result
decode_MyOp_result iprot bs = to_MyOp_result $ T.deserializeVal iprot (T.T_STRUCT typemap_MyOp_result) bs
typemap_MyOp_result :: T.TypeMap
typemap_MyOp_result = Map.fromList [(0,("success",T.T_I32))]
default_MyOp_result :: MyOp_result
default_MyOp_result = MyOp_result{
  myOp_result_success = 0}
process_ping (seqid, iprot, oprot, handler) = do
  args <- read_Ping_args iprot
  (X.catch
    (do
      Iface.ping handler
      let res = default_Ping_result
      T.writeMessageBegin oprot ("ping", T.M_REPLY, seqid)
      write_Ping_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("ping", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_myOp (seqid, iprot, oprot, handler) = do
  args <- read_MyOp_args iprot
  (X.catch
    (do
      val <- Iface.myOp handler (myOp_args_a args) (myOp_args_other args)
      let res = default_MyOp_result{myOp_result_success = val}
      T.writeMessageBegin oprot ("myOp", T.M_REPLY, seqid)
      write_MyOp_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("myOp", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "ping" -> process_ping (seqid,iprot,oprot,handler)
  "myOp" -> process_myOp (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
